 Python for Data Analysis
 
msysgit是Windows版的Git，从https://git-for-windows.github.io下载
git config --global user.name "syou"
git config --global user.email "aboutschool@gmail.com"

创建一个版本库非常简单，
首先，选择一个合适的地方，创建一个空目录：
$ mkdir git_repo
$ cd git_repo
$ pwd
$ mkdir PriceEx
$ cd PriceEx

第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init

添加文件到Git仓库，分两步：
第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
第二步，使用命令git commit，完成
提交文件(add n个文件, commit一次)
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."


要随时掌握工作区的状态，使用git status命令。
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#    modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

$ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.
 
 知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：
 $ git add readme.txt
 同样没有任何输出。在执行第二步git commit之前，我们再运行git status看看当前仓库的状态：
 $ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   readme.txt
#

git status告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：
$ git commit -m "add distributed"
[master ea34578] add distributed
 1 file changed, 1 insertion(+), 1 deletion(-)
 
提交后，我们再用git status命令看看仓库的当前状态：
$ git status
# On branch master
nothing to commit (working directory clean) 


git log命令显示从最近到最远的提交日志
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
git log --pretty=oneline

在Git中，用HEAD表示当前版本
上一个版本就是HEAD^
上上一个版本就是HEAD^^
往上100个版本所以写成HEAD~100

回退到上一个版本
$ git reset --hard HEAD^
指定回到某个版本
git reset --hard commit_id
$ git reset --hard 3628164
git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区.

Git在内部有个指向当前版本的HEAD指针，你让HEAD指向哪个版本号，当前版本定位在哪
Git提供了一个命令git reflog用来记录你的每一次命令，可以查看commit id


Git跟踪并管理的是修改，而非文件。每次更改后都要先add到缓冲区
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库

从版本库中删除文件，那就用命令git rm删掉，并且git commit
$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt
一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test.txt

远程仓库
一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，
如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人
如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"


把一个已有的本地仓库与远程仓库GitHub关联，然后，把本地仓库的内容推送到GitHub仓库
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
$ git remote add origin git@github.com:XXXXX/YYYYY.git
使用命令git push -u origin master第一次推送master分支的所有内容
此后用git push origin master推送最新修改

从远程库克隆
$ git clone git@github.com:XXXXX/YYYYY.git

分支

主分支，即master分支。
HEAD严格来说不是指向提交，而是指向master，
master才是指向提交的，所以，HEAD指向的就是当前分支。

首先，我们创建dev分支，然后切换到dev分支：
$ git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev

用git branch命令查看当前分支：
$ git branch
* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号。

切换回master分支
$ git checkout master

把dev分支的工作成果合并到当前分支master分支上：
$ git merge dev

合并完成后，就可以放心地删除dev分支了
$ git branch -d dev

用带参数的git log也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit
*   59bc1cb conflict fixed
|\
| * 75a857c AND simple
* | 400b400 & simple
|/
* fec145a branch test
  
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
$ git merge --no-ff -m "merge with no-ff" dev

保存工作区
当手头工作没有完成时，先把工作现场git stash一下，
然后去修复bug，修复后，再git stash pop，回到工作现场
$ git stash list
git stash pop
或
git stash apply stash_id
git stash drop

开发一个新feature，最好新建一个分支
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

查看远程库的信息，用
git remote
git remote -v

推送分支
git push origin master
git push origin dev


当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支
你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
$ git checkout -b dev origin/dev
指定本地dev分支与远程origin/dev分支的链接
git branch --set-upstream dev origin/dev

多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

打标签
$ git tag 标签名 commitid
$ git tag 标签名 默认最新的commit

git tag
git show <tagname>
如果标签打错了，也可以删除：
$ git tag -d v0.1
从远程删除
$ git push origin :refs/tags/v0.9

如果要推送某个标签到远程，使用命令git push origin <tagname>：
一次性推送全部尚未推送到远程的本地标签：
$ git push origin --tags


.gitignore文件
$ git check-ignore

配置别名
告诉Git，以后st就表示status
$ git config --global alias.st status
当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
$ git config --global alias.unstage 'reset HEAD'
$ git unstage test.py

配置一个git last，让其显示最后一次提交信息：
$ git config --global alias.last 'log -1'
$ git last

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中
每个仓库的Git配置文件都放在.git/config文件中

