git 教程
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

1.在Windows上安装Git//bh7uit6n8dih6
msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可。

2.安装完成后，还需要最后一步设置，在命令行输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

3.
创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。
$ pwd
$ mkdir learngit
$ cd learngit
$ cd /c/xampp/htdocs/ibe.com
$ pwd

4.
第二步，通过git init命令把这个目录变成Git可以管理的仓库：

$ git init

5.
把文件添加到版本库
一定要放到创建的版本库根目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。
$ git add readme.txt
$ git commit -m "wrote a readme file"

为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

6。
git status命令可以让我们时刻掌握仓库当前的状态
$ git status
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   readme.txt
#

7。
git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
$git diff

8.
版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：
最近到最远的提交日志
$ git log

如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
$ git log --pretty=oneline

9.回退到上一个版本
在Git中，用HEAD表示当前版本,
上一个版本就是HEAD^，上上一个版本就是HEAD^^
$git HEAD^

指定版本号
$ git reset --hard 3628164

10
Git提供了一个命令git reflog用来记录你的每一次命令
$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file

11
暂存区
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

12
Git管理的是修改
第一次修改 -> git add -> 第二次修改 -> git commit，怎么第二次的修改没有被提交
Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，
但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，
也就是第一次的修改被提交了，第二次的修改不会被提交。

13
撤销修改
13.1
git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区


13.2
git checkout -- file可以丢弃工作区的修改：
$ git checkout -- readme.txt
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态.
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除

14.
删除文件,那就用命令git rm删掉，并且git commit：
$ git rm test.txt
$ git commit

15
远程仓库
最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。
本地Git仓库和远程仓库gitlab之间的传输是通过SSH加密的，所以，需要一点设置：

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"

你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitLab，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

16
添加远程库
16.1
在Gitlab创建一个Git仓库，并且让这两个仓库进行远程同步(本地和远程)
可以从这个仓库克隆出新的仓库，也可以
把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到Gitlab仓库。
在本地的ibe.com仓库下运行命令：
$ git remote add origin git@gitlab.com:ibecom/ncec.git
远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库

16.2
下一步，就可以把本地库的所有内容推送到远程库上：用git push命令，实际上是把当前分支master推送到远程
$ git push -u origin master

从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master

17
从远程库克隆
$ git clone git@gitlab.com:ibecom/ncec.git

$ git clone git@gitlab.com:ibecom/shops2.git

查看远程库的信息，用git remote
$git remote
$git remote -v
origin  git@gitlab.com:ibecom/ncec.git (fetch)
origin  git@gitlab.com:ibecom/ncec.git (push)
如果没有推送权限，就看不到push的地址。

18
推送分支
$ git push origin master
如果要推送其他分支，比如dev，就改成：
$ git push origin dev

master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

查看分枝
$git branch

从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。
要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
$git checkout -b  dev origin/dev

19
你的伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，
Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：

$ git branch --set-upstream dev origin/dev    //指定本地dev分支与远程origin/dev分支的链接
$ git pull


20
多人协作
多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。
